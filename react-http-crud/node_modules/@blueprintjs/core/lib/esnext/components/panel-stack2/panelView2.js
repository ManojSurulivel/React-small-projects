/*
 * Copyright 2021 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as React from "react";
import { Classes, DISPLAYNAME_PREFIX } from "../../common";
import { Button } from "../button/buttons";
import { Text } from "../text/text";
export const PanelView2 = ({ panel, onClose, onOpen, previousPanel, showHeader, }) => {
    const hasPreviousPanel = previousPanel !== undefined;
    const handleClose = React.useCallback(() => {
        // only remove this panel if it is not the only one.
        if (hasPreviousPanel) {
            onClose(panel);
        }
    }, [onClose, panel, hasPreviousPanel]);
    const maybeBackButton = previousPanel === undefined ? null : (React.createElement(Button, { "aria-label": "Back", className: Classes.PANEL_STACK2_HEADER_BACK, icon: "chevron-left", onClick: handleClose, size: "small", text: previousPanel.title, title: previousPanel.htmlTitle, variant: "minimal" }));
    // `panel.renderPanel` is simply a function that returns a React.JSX.Element. It may be an FC which
    // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate
    // those hooks with their own lifecycle through a very simple wrapper component.
    const PanelWrapper = React.useMemo(() => () => 
    // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be
    // instantiated with a type unrelated to our generic constraint `T` here. We know
    // we're sending the right values here though, and it makes the consumer API for this
    // component type safe, so it's ok to do this...
    panel.renderPanel({
        closePanel: handleClose,
        openPanel: onOpen,
        ...panel.props,
    }), [panel, handleClose, onOpen]);
    return (React.createElement("div", { className: Classes.PANEL_STACK2_VIEW },
        showHeader && (React.createElement("div", { className: Classes.PANEL_STACK2_HEADER },
            React.createElement("span", null, maybeBackButton),
            React.createElement(Text, { className: Classes.HEADING, ellipsize: true, title: panel.htmlTitle }, panel.title),
            React.createElement("span", null))),
        React.createElement(PanelWrapper, null)));
};
PanelView2.displayName = `${DISPLAYNAME_PREFIX}.PanelView2`;
//# sourceMappingURL=panelView2.js.map