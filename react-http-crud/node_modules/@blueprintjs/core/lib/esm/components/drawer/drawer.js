/*
 * Copyright 2018 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign, __extends, __rest } from "tslib";
import classNames from "classnames";
import * as React from "react";
import { IconSize, SmallCross } from "@blueprintjs/icons";
import { AbstractPureComponent, Classes } from "../../common";
import * as Errors from "../../common/errors";
import { getPositionIgnoreAngles, isPositionHorizontal } from "../../common/position";
import { DISPLAYNAME_PREFIX } from "../../common/props";
import { Button } from "../button/buttons";
import { H4 } from "../html/html";
import { Icon } from "../icon/icon";
import { Overlay2 } from "../overlay2/overlay2";
export var DrawerSize;
(function (DrawerSize) {
    DrawerSize["SMALL"] = "360px";
    DrawerSize["STANDARD"] = "50%";
    DrawerSize["LARGE"] = "90%";
})(DrawerSize || (DrawerSize = {}));
var Drawer = /** @class */ (function (_super) {
    __extends(Drawer, _super);
    function Drawer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Drawer.prototype.render = function () {
        var _a, _b, _c;
        var _d;
        var _e = this.props, hasBackdrop = _e.hasBackdrop, size = _e.size, style = _e.style, position = _e.position;
        var _f = this.props, className = _f.className, children = _f.children, overlayProps = __rest(_f, ["className", "children"]);
        var realPosition = getPositionIgnoreAngles(position);
        var classes = classNames(Classes.DRAWER, (_a = {},
            _a[(_d = Classes.positionClass(realPosition)) !== null && _d !== void 0 ? _d : ""] = true,
            _a), className);
        var styleProp = size == null
            ? style
            : __assign(__assign({}, style), (_b = {}, _b[isPositionHorizontal(realPosition) ? "height" : "width"] = size, _b));
        return (
        // N.B. the `OVERLAY_CONTAINER` class is a bit of a misnomer since it is only being used by the Drawer
        // component, but we keep it for backwards compatibility.
        React.createElement(Overlay2, __assign({}, overlayProps, { className: classNames((_c = {}, _c[Classes.OVERLAY_CONTAINER] = hasBackdrop, _c)) }),
            React.createElement("div", { className: classes, style: styleProp },
                this.maybeRenderHeader(),
                children)));
    };
    Drawer.prototype.validateProps = function (props) {
        if (props.title == null) {
            if (props.icon != null) {
                console.warn(Errors.DIALOG_WARN_NO_HEADER_ICON);
            }
            if (props.isCloseButtonShown != null) {
                console.warn(Errors.DIALOG_WARN_NO_HEADER_CLOSE_BUTTON);
            }
        }
        if (props.position != null) {
            if (props.position !== getPositionIgnoreAngles(props.position)) {
                console.warn(Errors.DRAWER_ANGLE_POSITIONS_ARE_CASTED);
            }
        }
    };
    Drawer.prototype.maybeRenderCloseButton = function () {
        // `isCloseButtonShown` can't be defaulted through default props because of props validation
        // so this check actually defaults it to true (fails only if directly set to false)
        if (this.props.isCloseButtonShown !== false) {
            return (React.createElement(Button, { "aria-label": "Close", className: Classes.DIALOG_CLOSE_BUTTON, icon: React.createElement(SmallCross, { size: IconSize.LARGE }), onClick: this.props.onClose, variant: "minimal" }));
        }
        else {
            return null;
        }
    };
    Drawer.prototype.maybeRenderHeader = function () {
        var _a = this.props, icon = _a.icon, title = _a.title;
        if (title == null) {
            return null;
        }
        return (React.createElement("div", { className: Classes.DRAWER_HEADER },
            React.createElement(Icon, { icon: icon, size: IconSize.LARGE }),
            React.createElement(H4, null, title),
            this.maybeRenderCloseButton()));
    };
    Drawer.displayName = "".concat(DISPLAYNAME_PREFIX, ".Drawer");
    Drawer.defaultProps = {
        canOutsideClickClose: true,
        isOpen: false,
        position: "right",
        style: {},
    };
    return Drawer;
}(AbstractPureComponent));
export { Drawer };
//# sourceMappingURL=drawer.js.map