/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign, __rest } from "tslib";
import classNames from "classnames";
import * as React from "react";
import { Classes } from "../../common";
import { DISPLAYNAME_PREFIX } from "../../common/props";
var NS = Classes.getClassNamespace();
// this is a simple component, unit tests would be mostly tautological
/* istanbul ignore next */
/**
 * File input component.
 *
 * @see https://blueprintjs.com/docs/#core/components/file-input
 */
export var FileInput = function (props) {
    var _a, _b, _c;
    var buttonText = props.buttonText, className = props.className, disabled = props.disabled, fill = props.fill, _d = props.hasSelection, hasSelection = _d === void 0 ? false : _d, _e = props.inputProps, inputProps = _e === void 0 ? {} : _e, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    _f = props.large, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    large = _f === void 0 ? false : _f, onInputChange = props.onInputChange, _g = props.size, size = _g === void 0 ? "medium" : _g, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    _h = props.small, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    small = _h === void 0 ? false : _h, _j = props.text, text = _j === void 0 ? "Choose file..." : _j, htmlProps = __rest(props, ["buttonText", "className", "disabled", "fill", "hasSelection", "inputProps", "large", "onInputChange", "size", "small", "text"]);
    var rootClasses = classNames(className, Classes.FILE_INPUT, (_a = {},
        _a[Classes.DISABLED] = disabled,
        _a[Classes.FILL] = fill,
        _a[Classes.FILE_INPUT_HAS_SELECTION] = hasSelection,
        _a), Classes.sizeClass(size, { large: large, small: small }));
    var uploadProps = (_b = {},
        _b["".concat(NS, "-button-text")] = buttonText,
        _b.className = classNames(Classes.FILE_UPLOAD_INPUT, (_c = {},
            _c[Classes.FILE_UPLOAD_INPUT_CUSTOM_TEXT] = !!buttonText,
            _c)),
        _b);
    var handleInputChange = function (e) {
        var _a;
        onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(e);
        (_a = inputProps === null || inputProps === void 0 ? void 0 : inputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(inputProps, e);
    };
    return (React.createElement("label", __assign({}, htmlProps, { className: rootClasses }),
        React.createElement("input", __assign({}, inputProps, { onChange: handleInputChange, type: "file", disabled: disabled })),
        React.createElement("span", __assign({}, uploadProps), text)));
};
FileInput.displayName = "".concat(DISPLAYNAME_PREFIX, ".FileInput");
//# sourceMappingURL=fileInput.js.map