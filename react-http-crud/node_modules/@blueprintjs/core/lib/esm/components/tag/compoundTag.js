/*
 * Copyright 2024 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign, __rest } from "tslib";
import classNames from "classnames";
import * as React from "react";
import { Classes, DISPLAYNAME_PREFIX, Utils } from "../../common";
import { isReactNodeEmpty } from "../../common/utils";
import { Icon } from "../icon/icon";
import { Text } from "../text/text";
import { TagRemoveButton } from "./tagRemoveButton";
/**
 * Compound tag component.
 *
 * @see https://blueprintjs.com/docs/#core/components/compound-tag
 */
export var CompoundTag = React.forwardRef(function (props, ref) {
    var _a;
    var _b = props.active, active = _b === void 0 ? false : _b, children = props.children, className = props.className, endIcon = props.endIcon, _c = props.fill, fill = _c === void 0 ? false : _c, icon = props.icon, intent = props.intent, _d = props.interactive, interactive = _d === void 0 ? false : _d, leftContent = props.leftContent, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    _e = props.large, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    large = _e === void 0 ? false : _e, _f = props.minimal, minimal = _f === void 0 ? false : _f, onRemove = props.onRemove, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    rightIcon = props.rightIcon, _g = props.round, round = _g === void 0 ? false : _g, _h = props.size, size = _h === void 0 ? "medium" : _h, _j = props.tabIndex, tabIndex = _j === void 0 ? 0 : _j, htmlProps = __rest(props, ["active", "children", "className", "endIcon", "fill", "icon", "intent", "interactive", "leftContent", "large", "minimal", "onRemove", "rightIcon", "round", "size", "tabIndex"]);
    var isRemovable = Utils.isFunction(onRemove);
    var tagClasses = classNames(Classes.TAG, Classes.COMPOUND_TAG, Classes.intentClass(intent), Classes.sizeClass(size, { large: large }), (_a = {},
        _a[Classes.ACTIVE] = active,
        _a[Classes.FILL] = fill,
        _a[Classes.INTERACTIVE] = interactive,
        _a[Classes.MINIMAL] = minimal,
        _a[Classes.ROUND] = round,
        _a), className);
    return (React.createElement("span", __assign({}, htmlProps, { className: tagClasses, tabIndex: interactive ? tabIndex : undefined, ref: ref }),
        React.createElement("span", { className: Classes.COMPOUND_TAG_LEFT },
            React.createElement(Icon, { icon: icon }),
            React.createElement(Text, { className: classNames(Classes.COMPOUND_TAG_LEFT_CONTENT, Classes.FILL), tagName: "span" }, leftContent)),
        React.createElement("span", { className: Classes.COMPOUND_TAG_RIGHT },
            !isReactNodeEmpty(children) && (React.createElement(Text, { className: classNames(Classes.COMPOUND_TAG_RIGHT_CONTENT, Classes.FILL), tagName: "span" }, children)),
            React.createElement(Icon, { icon: endIcon !== null && endIcon !== void 0 ? endIcon : rightIcon }),
            isRemovable && React.createElement(TagRemoveButton, __assign({}, props)))));
});
CompoundTag.displayName = "".concat(DISPLAYNAME_PREFIX, ".CompoundTag");
//# sourceMappingURL=compoundTag.js.map