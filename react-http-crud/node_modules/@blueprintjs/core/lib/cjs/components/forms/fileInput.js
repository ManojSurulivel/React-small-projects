"use strict";
/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileInput = void 0;
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var common_1 = require("../../common");
var props_1 = require("../../common/props");
var NS = common_1.Classes.getClassNamespace();
// this is a simple component, unit tests would be mostly tautological
/* istanbul ignore next */
/**
 * File input component.
 *
 * @see https://blueprintjs.com/docs/#core/components/file-input
 */
var FileInput = function (props) {
    var _a, _b, _c;
    var buttonText = props.buttonText, className = props.className, disabled = props.disabled, fill = props.fill, _d = props.hasSelection, hasSelection = _d === void 0 ? false : _d, _e = props.inputProps, inputProps = _e === void 0 ? {} : _e, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    _f = props.large, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    large = _f === void 0 ? false : _f, onInputChange = props.onInputChange, _g = props.size, size = _g === void 0 ? "medium" : _g, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    _h = props.small, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    small = _h === void 0 ? false : _h, _j = props.text, text = _j === void 0 ? "Choose file..." : _j, htmlProps = tslib_1.__rest(props, ["buttonText", "className", "disabled", "fill", "hasSelection", "inputProps", "large", "onInputChange", "size", "small", "text"]);
    var rootClasses = (0, classnames_1.default)(className, common_1.Classes.FILE_INPUT, (_a = {},
        _a[common_1.Classes.DISABLED] = disabled,
        _a[common_1.Classes.FILL] = fill,
        _a[common_1.Classes.FILE_INPUT_HAS_SELECTION] = hasSelection,
        _a), common_1.Classes.sizeClass(size, { large: large, small: small }));
    var uploadProps = (_b = {},
        _b["".concat(NS, "-button-text")] = buttonText,
        _b.className = (0, classnames_1.default)(common_1.Classes.FILE_UPLOAD_INPUT, (_c = {},
            _c[common_1.Classes.FILE_UPLOAD_INPUT_CUSTOM_TEXT] = !!buttonText,
            _c)),
        _b);
    var handleInputChange = function (e) {
        var _a;
        onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(e);
        (_a = inputProps === null || inputProps === void 0 ? void 0 : inputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(inputProps, e);
    };
    return (React.createElement("label", tslib_1.__assign({}, htmlProps, { className: rootClasses }),
        React.createElement("input", tslib_1.__assign({}, inputProps, { onChange: handleInputChange, type: "file", disabled: disabled })),
        React.createElement("span", tslib_1.__assign({}, uploadProps), text)));
};
exports.FileInput = FileInput;
exports.FileInput.displayName = "".concat(props_1.DISPLAYNAME_PREFIX, ".FileInput");
//# sourceMappingURL=fileInput.js.map