"use strict";
/*
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tag = void 0;
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var React = tslib_1.__importStar(require("react"));
var useInteractiveAttributes_1 = require("../../accessibility/useInteractiveAttributes");
var common_1 = require("../../common");
var utils_1 = require("../../common/utils");
var icon_1 = require("../icon/icon");
var text_1 = require("../text/text");
var tagRemoveButton_1 = require("./tagRemoveButton");
/**
 * Tag component.
 *
 * @see https://blueprintjs.com/docs/#core/components/tag
 */
exports.Tag = React.forwardRef(function (props, ref) {
    var _a;
    var children = props.children, className = props.className, endIcon = props.endIcon, _b = props.fill, fill = _b === void 0 ? false : _b, icon = props.icon, intent = props.intent, interactive = props.interactive, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    _c = props.large, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    large = _c === void 0 ? false : _c, _d = props.minimal, minimal = _d === void 0 ? false : _d, multiline = props.multiline, onRemove = props.onRemove, 
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    rightIcon = props.rightIcon, _e = props.round, round = _e === void 0 ? false : _e, _f = props.size, size = _f === void 0 ? "medium" : _f, _g = props.tabIndex, tabIndex = _g === void 0 ? 0 : _g, htmlTitle = props.htmlTitle, htmlProps = tslib_1.__rest(props, ["children", "className", "endIcon", "fill", "icon", "intent", "interactive", "large", "minimal", "multiline", "onRemove", "rightIcon", "round", "size", "tabIndex", "htmlTitle"]);
    var isRemovable = common_1.Utils.isFunction(onRemove);
    var isInteractive = interactive !== null && interactive !== void 0 ? interactive : htmlProps.onClick != null;
    var _h = (0, useInteractiveAttributes_1.useInteractiveAttributes)(isInteractive, props, ref, {
        defaultTabIndex: 0,
        disabledTabIndex: undefined,
    }), active = _h[0], interactiveProps = _h[1];
    var tagClasses = (0, classnames_1.default)(common_1.Classes.TAG, common_1.Classes.intentClass(intent), common_1.Classes.sizeClass(size, { large: large }), (_a = {},
        _a[common_1.Classes.ACTIVE] = active,
        _a[common_1.Classes.FILL] = fill,
        _a[common_1.Classes.INTERACTIVE] = isInteractive,
        _a[common_1.Classes.MINIMAL] = minimal,
        _a[common_1.Classes.ROUND] = round,
        _a), className);
    return (React.createElement("span", tslib_1.__assign({}, (0, common_1.removeNonHTMLProps)(htmlProps), interactiveProps, { className: tagClasses }),
        React.createElement(icon_1.Icon, { icon: icon }),
        !(0, utils_1.isReactNodeEmpty)(children) && (React.createElement(text_1.Text, { className: common_1.Classes.FILL, ellipsize: !multiline, tagName: "span", title: htmlTitle }, children)),
        React.createElement(icon_1.Icon, { icon: endIcon !== null && endIcon !== void 0 ? endIcon : rightIcon }),
        isRemovable && React.createElement(tagRemoveButton_1.TagRemoveButton, tslib_1.__assign({}, props))));
});
exports.Tag.displayName = "".concat(common_1.DISPLAYNAME_PREFIX, ".Tag");
//# sourceMappingURL=tag.js.map